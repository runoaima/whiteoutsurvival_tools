{% extends "base/base.html" %}
{% block title %}ヒーロースター計算ツール{% endblock %}
{% block content %}
{% load static %}
<style>
.star {
    font-size: 32px;
    cursor: pointer;
    color: gray;
}
.star.selected {
    color: gold;
}
</style>
</head>
<body>

<div id="equipment1">
    <div class="stars current" data-star="" data-sub="">
        <span class="star" data-value="1">★</span>
        <span class="star" data-value="2">★</span>
        <span class="star" data-value="3">★</span>
        <span class="star" data-value="4">★</span>
        <span class="star" data-value="5">★</span>
    </div>
    <select class="sub-level">
        <option value="1">1</option><option value="2">2</option>
        <option value="3">3</option><option value="4">4</option>
        <option value="5">5</option><option value="6">6</option>
    </select>

    <div class="stars target" data-star="" data-sub="">
        <span class="star" data-value="1">★</span>
        <span class="star" data-value="2">★</span>
        <span class="star" data-value="3">★</span>
        <span class="star" data-value="4">★</span>
        <span class="star" data-value="5">★</span>
    </div>
    <select class="sub-level">
        <option value="1">1</option><option value="2">2</option>
        <option value="3">3</option><option value="4">4</option>
        <option value="5">5</option><option value="6">6</option>
    </select>
</div>

<div id="needResult"></div>
<button id="resetBtn">リセット</button>

<script>
function setupStars(container, type) {
    container.querySelectorAll('.star').forEach(star => {
        star.addEventListener('click', function () {
            const value = parseInt(this.dataset.value);
            const stars = container.querySelectorAll('.star');
            stars.forEach(s => {
                s.classList.toggle('selected', parseInt(s.dataset.value) <= value);
            });
            container.dataset.star = value;
            updateNeed();
        });
    });

    container.parentNode.querySelector('.sub-level').addEventListener('change', function () {
        container.dataset.sub = this.value;
        updateNeed();
    });
}

function updateNeed() {
    const current = document.querySelector('#equipment1 .stars.current');
    const target = document.querySelector('#equipment1 .stars.target');
    const resultDiv = document.getElementById("needResult");

    const curStar = parseInt(current.dataset.star || 0);
    const curSub = parseInt(current.dataset.sub || 0);
    const tarStar = parseInt(target.dataset.star || 0);
    const tarSub = parseInt(target.dataset.sub || 0);

    if (!curStar || !tarStar) {
        resultDiv.innerHTML = "";
        return;
    }

    const curLevel = curStar * 10 + curSub;
    const tarLevel = tarStar * 10 + tarSub;

    if (tarLevel <= curLevel) {
        resultDiv.innerHTML = "希望レベルは現在レベルより高くしてください";
        return;
    }

    resultDiv.innerHTML = `必要素材: 英雄の欠片 × ???`; // ★ここは計算ロジックを入れる
}

document.addEventListener("DOMContentLoaded", () => {
    setupStars(document.querySelector('#equipment1 .stars.current'), "current");
    setupStars(document.querySelector('#equipment1 .stars.target'), "target");
});

document.getElementById("resetBtn").addEventListener("click", () => {
    document.querySelectorAll('#equipment1 .star').forEach(s => s.classList.remove('selected'));
    document.querySelectorAll('#equipment1 .stars').forEach(c => { c.dataset.star = ""; c.dataset.sub = ""; });
    document.querySelectorAll('#equipment1 .sub-level').forEach(sel => sel.value = "1");
    document.getElementById("needResult").innerHTML = "";
});
</script>

{% endblock %}
